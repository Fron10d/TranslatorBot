# Libs
from bot import config
import telebot
from google.cloud import translate_v2
from gtts import gTTS
import os
import time

# TOKEN
bot = telebot.TeleBot('TOKEN')
mydb = config.mydb

# API
os.environ[
    'GOOGLE_APPLICATION_CREDENTIALS'] = r''

# –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
glob_lang = 'en'
target = 'en'
langs = ['en', 'kk', 'ru']

# -----------–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Ä–æ–∫–æ–≤--------------
lessons = telebot.types.InlineKeyboardMarkup()

lessons.row(
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ –Ω–æ–º–µ—Ä 1', url='https://lingust.ru/english/grammar/lesson1')
)

lessons.row(
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ –Ω–æ–º–µ—Ä 2', url='https://lingust.ru/english/grammar/lesson2'),
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ –Ω–æ–º–µ—Ä 3', url='https://lingust.ru/english/grammar/lesson3'),
)

lessons.row(
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ –Ω–æ–º–µ—Ä 4', url='https://lingust.ru/english/grammar/lesson4'),
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ –Ω–æ–º–µ—Ä 5', url='https://lingust.ru/english/grammar/lesson5'),
)
lessons.row(
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ –Ω–æ–º–µ—Ä 6', url='https://lingust.ru/english/grammar/lesson6'),
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ –Ω–æ–º–µ—Ä 7', url='https://lingust.ru/english/grammar/lesson7'),
)

lessons.row(
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ –Ω–æ–º–µ—Ä 8', url='https://lingust.ru/english/grammar/lesson8'),
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ –Ω–æ–º–µ—Ä 9', url='https://lingust.ru/english/grammar/lesson9'),
)
lessons.row(
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ –Ω–æ–º–µ—Ä 10', url='https://lingust.ru/english/grammar/lesson10'),
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ –Ω–æ–º–µ—Ä 11', url='https://lingust.ru/english/grammar/lesson11'),
)
lessons.row(
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ 12', url='https://lingust.ru/english/grammar/lesson12'),
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ 13', url='https://lingust.ru/english/grammar/lesson13'),
    telebot.types.InlineKeyboardButton('–£—Ä–æ–∫ 14', url='https://lingust.ru/english/grammar/lesson14')
)


# start
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(
        message.chat.id,
        '–≠—Ç–æ –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫.\n' +
        '–ë–æ—Ç —É–º–µ–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ —Ç—Ä–∏ —è–∑—ã–∫–∞\n(English, Kazakh, Russian, Ukrainan, Uzbek, Kyrgyz, Turkmen, Azerbaijani etc.).'
        '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n'
        '–ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /change.\n' +
        '–î–ª—è —Å–ø—Ä–∞–≤–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /help.\n'
        '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ /registration'
    )


# registration in DB
@bot.message_handler(commands=['registration'])
def start_command(message):
    mycursor = mydb.cursor()  # special object that makes requests and receives their results
    sql = "SELECT * FROM users WHERE id = %s"
    adr = (str(message.from_user.id),)
    mycursor.execute(sql, adr, )
    myresult = mycursor.fetchall()
    if myresult is None or myresult == [] or myresult == ():
        mycursor = mydb.cursor()
        sql = "INSERT INTO users (id) VALUES (%s)"
        val = (str(message.from_user.id),)
        mycursor.execute(sql, val)  # makes an INSERT query against the database using normal SQL syntax
        mydb.commit()  # when we make changes to the database - 'commit()' saves the transaction
        bot.reply_to(message, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º," + " " + (str(message.from_user.first_name)) + ", –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        bot.reply_to(message, (
            str(message.from_user.first_name)) + ", –í—ã  —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–µ—Ä–µ–≤–æ–¥—É)  ")


# last user translates
@bot.message_handler(commands=['mytranslates'])
def rows_command(message):
    try:
        mycursor_2 = mydb.cursor()  # special object that makes requests and receives their results
        sql_2 = "SELECT translated_text FROM  users WHERE id = %s"
        adr_2 = (str(message.from_user.id),)
        mycursor_2.execute(sql_2, adr_2, )
        rows = mycursor_2.fetchall()
        for row in rows:
            print(row)

        bot.reply_to(message, "" + "@" + (message.from_user.username) + " –í–∞—à –ø–æ—Å–ª–¥–µ–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥:" + "\n" + str(row))
    # except Error as e:
    #         print(e)
    finally:
        mycursor_2.close()


#   help
@bot.message_handler(commands=['help'])
def help_command(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(
        telebot.types.InlineKeyboardButton(
            'Message to developer', url="https://t.me/@maksutovm"
        )
    )
    bot.send_message(
        message.chat.id,
        '1) –≠—Ç–æ—Ç –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫.\n' +
        '2) –ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±—ç—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n' +
        '3) –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –∑–∞–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.',
        reply_markup=keyboard
    )


# text to audio
@bot.message_handler(commands=['audio'])
def send_audio(message):
    try:
        if hasattr(message.reply_to_message, 'text'):
            file_name = f'{str(message.chat.id)}.ogg'
            tts = gTTS(message.reply_to_message.text, lang=target)
            tts.save(file_name)
            with open(file_name, 'rb') as voice_message:
                bot.send_voice(chat_id=message.chat.id, voice=voice_message)
            os.remove(file_name)
        else:
            bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É –∫–æ–º–º–∞–Ω–¥—É')
    except:
        audio_error = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ—Ç—É –∞—É–¥–∏–æ–ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π'
        bot.send_message(message.chat.id, audio_error)
        print('error')


# English grammar
@bot.message_handler(commands=['grammar'])
def send_grammar(message):
    link_button = telebot.types.InlineKeyboardMarkup()
    link_button.row(
        telebot.types.InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å', callback_data='view')
    )

    text = '<b>–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b>\n–û–Ω–ª–∞–π–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º ' \
           '–∏–∑–ª–æ–∂–µ–Ω–∏–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —á–∞—Å—Ç–µ–π —Ä–µ—á–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. '

    bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=link_button)


# callback func grammar
@bot.callback_query_handler(func=lambda call: call.data == 'view')
def grammar_callback(query: telebot.types.CallbackQuery):
    data = query.data
    if data == 'view':
        bot.edit_message_text('–í—ã–±–µ—Ä–µ—Ç–µ —É—Ä–æ–∫', message_id=query.message.message_id, chat_id=query.message.chat.id,
                              reply_markup=lessons)


# Change language
@bot.message_handler(commands=['change'])
def exchange_command(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(
        telebot.types.InlineKeyboardButton('üá∞üáø Kazakh ', callback_data='get-kk')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üá∑üá∫ Russian ', callback_data='get-ru')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üá∫üá¶ Ukrainan ', callback_data='get-uk')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üá¨üáß English ', callback_data='get-en')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üá∫üáø Uzbek ', callback_data='get-uz')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üá∞üá¨ Kyrgyz ', callback_data='get-ky')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üáπüá≤ Turkmen ', callback_data='get-tk')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üá¶üáø Azerbaijani ', callback_data='get-az')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üáπüáº Chinese ', callback_data='get-zh-TW')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üá™üá∏ Spanish ', callback_data='get-es')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üáÆüá≥ Hindi ', callback_data='get-hi')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üáµüáπ Portuguese ', callback_data='get-pt')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üáØüáµ Japanese ', callback_data='get-ja')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üá©üá™ German ', callback_data='get-de')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üá∞üá∑ Korean ', callback_data='get-ko')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üáπüá∑ Turkish', callback_data='get-tr')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üá¶üá™ Arabic', callback_data='get-ar')
    ),

    keyboard.row(
        telebot.types.InlineKeyboardButton('üáÆüáπ Italian', callback_data='get-it')
    )

    bot.send_message(
        message.chat.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ (—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ, –±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –≤—ã –ø–∏—à–∏—Ç–µ –∏ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –Ω–∞ –Ω—É–∂–Ω—ã–π):',
        reply_markup=keyboard
    )


# keyboard
@bot.callback_query_handler(func=lambda call: True)
def iq_callback(query):
    data = query.data
    if data.startswith('get-'):
        get_ex_callback(query)


def get_ex_callback(query):
    bot.answer_callback_query(query.id)
    send_exchange_result(query.message, query.data[4:])


#
def send_exchange_result(message, ex_code):
    bot.send_chat_action(message.chat.id, 'typing')
    global target
    target = ex_code
    bot.send_message(
        message.chat.id, "Target language changed to " + ex_code.title()
    )


# translate
@bot.message_handler(func=lambda message: message.chat.type == 'private', content_types=['text'])
def send_text(message):
    try:
        translate_client = translate_v2.Client()
        global target
        text = message.text
        result = translate_client.translate(
            text,
            target_language=target)
        output = translate_client.translate(
            text,
            target_language=target)
        print(format(result["translatedText"]))
        print(output)
        # tts = gTTS(text=text, lang='ru')
        # tts.save('sound.mp3')
        error = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ, –≤–æ–∑–º–æ–∂–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ –±—ã–ª–∏ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π'
        bot.send_message(message.chat.id, output['translatedText'])

        mycursor = mydb.cursor()  # special object that makes requests and receives their results
        sql = "SELECT * FROM users WHERE translated_text = %s"
        adr = (str(message.text),)
        mycursor.execute(sql, adr, )
        myresult = mycursor.fetchall()  # gets the result of the request made
        if myresult is None or myresult == [] or myresult == ():
            mycursor = mydb.cursor()
            sql = "INSERT INTO users (id, username, translated_text, input_text, language) VALUES (%s, %s, %s, %s, %s)"
            val = (str(message.from_user.id), (str(message.from_user.username)), (format(result["translatedText"])),
                   (format(result["input"])), (format(result["detectedSourceLanguage"])))
            mycursor.execute(sql, val)  # makes an INSERT query against the database using normal SQL syntax
            mydb.commit()  # when we make changes to the database - 'commit()' saves the transaction
    except:
        # bot.send_message(message.chat.id, error)
        pass


# work in the group
@bot.message_handler(func=lambda message: message.chat.type == 'group' and message.entities is not None)
def send_text_in_group(message):
    if '#en' in message.text:
        translate_client = translate_v2.Client()
        text_1 = message.reply_to_message.text
        output = translate_client.translate(
            text_1,
            target_language=langs[0])
        print(output)
        bot.send_message(message.chat.id, output['translatedText'])

    elif '#kk' in message.text:
        translate_client = translate_v2.Client()
        text_2 = message.reply_to_message.text
        output = translate_client.translate(
            text_2,
            target_language=langs[1])
        print(output)
        bot.send_message(message.chat.id, output['translatedText'])

    elif '#ru' in message.text:
        translate_client = translate_v2.Client()
        text_3 = message.reply_to_message.text
        output = translate_client.translate(
            text_3,
            target_language=langs[2])
        print(output)
        bot.send_message(message.chat.id, output['translatedText'])


# run
while True:
    try:
        bot.polling(none_stop=True)

    except Exception as exs:
        print(exs)

        time.sleep(15)
